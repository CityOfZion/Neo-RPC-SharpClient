@page "/network"
@using NeoModules.Rest.Interfaces
@using NeoModules.Rest.DTOs.HappyNodes
@inject IHappyNodesService HappyNodesService

@if (isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{

    <h2>HappyNodes Service Demo</h2>
    <br />
    <h4>Last Block: @lastBlock</h4>
    <h4>Average block time: @blockTime seconds</h4>

    <br />
    <h3 style="color: green">Unconfirmed Transactions</h3>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Tx hash
                </th>
                <th>
                    Hostname
                </th>
                <th>
                    Connection Id
                </th>
                <th>
                    Last block height
                </th>
                <th>
                    Node count
                </th>
                <th>
                    Port
                </th>
                <th>
                    Protocol
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (UnconfirmedTransaction tx in unconfirmedTxs)
            {
                <tr>
                    <td>@tx.Tx</td>
                    <td>@tx.Hostname</td>
                    <td>@tx.ConnectionId</td>
                    <td>@tx.LastBlockheight</td>
                    <td>@tx.NodeCount</td>
                    <td>@tx.Port</td>
                    <td>@tx.Protocol.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}


@functions {
bool isLoading = true;
long lastBlock;
decimal blockTime;
IList<UnconfirmedTransaction> unconfirmedTxs;
IList<FlatNode> nodesFlat;

protected override async Task OnInitAsync()
{

    lastBlock = await HappyNodesService.GetBestBlock();
    blockTime = await HappyNodesService.GetBlockTime();
    var unconfirmed = await HappyNodesService.GetUnconfirmed();
    unconfirmedTxs = unconfirmed.UnconfirmedTransactions;
    nodesFlat = await HappyNodesService.GetNodesFlat();
    isLoading = false;
}

}
